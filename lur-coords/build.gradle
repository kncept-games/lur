
plugins {
	id 'java-library'
    id 'signing'

	// https://github.com/nebula-plugins/nebula-publishing-plugin
	// id("com.netflix.nebula.oss-publishing") version "3.3.0"
	id("com.netflix.nebula.maven-publish") version "20.3.0"

	id("com.netflix.nebula.source-jar") version "20.3.0"
	id("com.netflix.nebula.javadoc-jar") version "20.3.0"


	id("com.netflix.nebula.publish-verification") version "20.3.0"
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
}

java {
	targetCompatibility = JavaVersion.VERSION_1_7
	sourceCompatibility = JavaVersion.VERSION_1_7
    // withJavadocJar()
    // withSourcesJar()
}

jar {
	manifest {
		attributes(
			'Implementation-Title': project.name,
			'Implementation-Vendor' : 'kncept',
			'Implementation-Version': project.version,
			'Implementation-Author': 'Nicholas Krul', //non standard
			'Created-By': System.getProperty('java.version'),
			'Built-By': System.getProperty('user.name'),
			'Built-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			'Source-Compatibility': project.sourceCompatibility,
			'Target-Compatibility': project.targetCompatibility,
            'Build-Hash': getCheckedOutGitCommitHash(),
			// 'Main-Class': 'none'
		)
	}
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

// eg: https://gist.github.com/MRezaNasirloo/ccfdb24f10ebefee0d871d4e84b37309
def String getCheckedOutGitCommitHash() {
	def gitFolder = "$rootDir/.git/"
	def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
	def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
	// def isRef = head.length > 1     // ref: refs/heads/master
	if(isCommit) return head[0].trim()
	def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
	return refHead.text.trim()
}

task captureCurrentGitHash {
	doLast {
		def resourcesFolder = "$projectDir/src/generated/resources/com/kncept/ksuid"
		def file = new File(resourcesFolder, 'current.hash')
		if (!file.getParentFile().exists()) file.getParentFile().mkdirs() // ensure directories exist
		file.createNewFile()
		file.text = getCheckedOutGitCommitHash()
	}
}
compileJava.dependsOn captureCurrentGitHash

publishing {
    publications {
        nebula(MavenPublication) {

            pom {
				name = 'Kncept LUR'
				description = 'Hex Coordinate System with 2D Utils'
				url = 'https://github.com/kncept-games/lur'
				properties = [
						"corporate.website": "https://www.kncept.com",
				]
				licenses {
					license {
						name = 'unlicense'
						url = 'https://github.com/kncept-games/lur/blob/main/LICENSE'
					}
				}
				developers {
					developer {
						id = 'nkrul'
						name = 'Nicholas Krul'
						email = 'nicholas.krul@gmail.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/kncept-games/lur.git'
					developerConnection = 'scm:git:ssh://github.com/kncept-games/lur.git'
					url = 'https://github.com/kncept-games/lur'
				}
			}
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            // url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            url = "https://oss.sonatype.org/service/local/staging1/deploy/maven2/"
            credentials {
                username = project.ossrhUsername
                password = project.ossrhPassword
            }
        }
    }
}

signing {
    // 'no configured signatory'
    // remap for signing.secretKeyRingFile (needs ../)
    // useInMemoryPgpKeys(
    //     project.findProperty("signing.keyId"),
    //     "../" + project.findProperty("signing.secretKeyRingFile"),
    //     project.findProperty("signing.password"))
    sign publishing.publications.nebula
}
tasks.withType(Sign) {
    onlyIf("sign if gradle.properties exists") { new File(rootDir, "gradle.properties").exists() }
}
